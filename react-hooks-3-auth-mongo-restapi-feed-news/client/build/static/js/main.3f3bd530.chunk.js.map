{"version":3,"sources":["context/auth/AuthContext.js","components/Nav.js","context/auth/authReducer.js","context/types.js","hooks/http.hook.js","context/auth/AuthState.js","pages/HomePage.js","components/Loader.js","components/PostList.js","pages/post/PostsPage.js","pages/ProfilePage.js","components/AuthForm.js","pages/AuthPage.js","pages/NotFound.js","pages/post/CreatePostPage.js","components/Post.js","pages/post/PostPage.js","pages/post/PostsByUserIdPage.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["AuthContext","createContext","Nav","useContext","auth","signOut","className","exact","to","token","onClick","e","preventDefault","userId","AuthReducer","state","action","type","payload","useHttp","useState","loading","setLoading","request","useCallback","url","a","async","method","body","headers","JSON","stringify","fetch","response","json","data","ok","errors","alert","message","formatErrors","map","msg","join","AuthState","children","useReducer","dispatch","ready","setReady","history","useHistory","localStorage","removeItem","push","autoSignIn","useEffect","parse","getItem","jwtDecode","exp","Date","getTime","isJwtValid","Provider","value","signIn","formData","setItem","register","HomePage","role","aria-label","Loader","PostList","posts","length","item","key","_id","title","text","date","toLocaleString","PostsPage","setPosts","ProfilePage","props","profileData","setProfileData","Authorization","id","email","post","AuthForm","submitLoginHandler","submitRegisterHandler","changeHandler","placeholder","name","onChange","disabled","AuthPage","password","form","setForm","isValidated","target","NotFound","CreatePostPage","onSubmit","rows","Post","PostPage","match","params","setPost","PostsByUserId","Routes","path","component","App","Boolean","window","location","hostname","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.3f3bd530.chunk.js","sourcesContent":["import { createContext } from 'react'\n\nexport const AuthContext = createContext()\n","import React, { useContext } from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { AuthContext } from '../context/auth/AuthContext'\n\nexport const Nav = () => {\n  const { auth, signOut } = useContext(AuthContext)\n\n  const logoutHandler = e => {\n    e.preventDefault()\n    signOut()\n  }\n\n  return (\n    <nav className=\"nav\">\n      <div className=\"nav__logo\">\n        <h1>\n          <NavLink exact to=\"/\">\n            Тестовое задание #3\n          </NavLink>\n        </h1>\n      </div>\n      {auth.token ? (\n        <ul className=\"nav__list\">\n          <li className=\"nav__item\">\n            <NavLink to=\"/auth\" onClick={logoutHandler}>\n              Выход\n            </NavLink>\n          </li>\n          <li className=\"nav__item\">\n            <NavLink to=\"/posts\">Посты</NavLink>\n          </li>\n          <li className=\"nav__item\">\n            <NavLink to={`/profile/${auth.userId}`}>Профиль</NavLink>\n          </li>\n        </ul>\n      ) : (\n        <ul className=\"nav__list\">\n          <li className=\"nav__item\">\n            <NavLink to=\"/auth\">Вход/Регистрация</NavLink>\n          </li>\n          <li className=\"nav__item\">\n            <NavLink to=\"/posts\">Посты</NavLink>\n          </li>\n        </ul>\n      )}\n    </nav>\n  )\n}\n","import { SIGNIN, SIGNOUT, SIGNIN_AUTO } from '../types'\n\nexport const AuthReducer = (state, action) => {\n  switch (action.type) {\n    case SIGNIN:\n      return {\n        ...state,\n        token: action.payload.token,\n        userId: action.payload.userId\n      }\n\n    case SIGNOUT:\n      return {\n        ...state,\n        token: null,\n        userId: null\n      }\n\n    case SIGNIN_AUTO:\n      return {\n        ...state,\n        token: action.payload.token,\n        userId: action.payload.userId\n      }\n\n    default:\n      return state\n  }\n}\n","export const SIGNIN = 'SIGNIN'\nexport const SIGNOUT = 'SIGNOUT'\nexport const SIGNIN_AUTO = 'SIGNIN_AUTO'\n","import { useState, useCallback } from 'react'\n\nexport const useHttp = () => {\n  const [loading, setLoading] = useState(false)\n\n  const request = useCallback(\n    async (url, method = 'GET', body = null, headers = {}) => {\n      setLoading(true)\n\n      try {\n        if (body) {\n          body = JSON.stringify(body)\n          headers['Content-Type'] = 'application/json'\n        }\n\n        const response = await fetch(url, {\n          method,\n          body,\n          headers\n        })\n        const data = await response.json()\n\n        if (!response.ok) {\n          throw data\n        }\n\n        setLoading(false)\n        return data\n      } catch (error) {\n        if (!error.errors) {\n          alert(error.message)\n          setLoading(false)\n        }\n        const formatErrors = error.errors.map(e => e.msg).join('\\n')\n        alert(`${error.message}:\\n${formatErrors}`)\n        setLoading(false)\n        throw error\n      }\n    },\n    []\n  )\n  return { loading, request }\n}\n","import React, { useReducer, useEffect, useCallback, useState } from 'react'\nimport { AuthContext } from './AuthContext'\nimport { AuthReducer } from './authReducer'\nimport { SIGNIN, SIGNOUT, SIGNIN_AUTO } from '../types'\nimport { useHttp } from '../../hooks/http.hook'\nimport jwtDecode from 'jwt-decode'\nimport { useHistory } from 'react-router-dom'\n\nconst storageName = 'userData'\n\nexport const AuthState = ({ children }) => {\n  const initialState = {\n    token: null,\n    userId: null\n  }\n\n  const [state, dispatch] = useReducer(AuthReducer, initialState)\n  const [ready, setReady] = useState(false)\n  const { request, loading } = useHttp()\n  const history = useHistory()\n\n  const signIn = async formData => {\n    try {\n      const { token, userId, message } = await request(\n        '/api/auth/login',\n        'POST',\n        formData\n      )\n      localStorage.setItem(\n        storageName,\n        JSON.stringify({\n          userId,\n          token\n        })\n      )\n\n      dispatch({\n        type: SIGNIN,\n        payload: { token, userId }\n      })\n      return { message, userId }\n    } catch (error) {}\n  }\n\n  const register = async formData => {\n    try {\n      const response = await request('/api/auth/register', 'POST', formData)\n      return response\n    } catch (error) {}\n  }\n\n  const signOut = useCallback(\n    (message = 'Вышли из аккаунта') => {\n      localStorage.removeItem(storageName)\n      dispatch({ type: SIGNOUT })\n      history.push('/auth')\n      alert(message)\n    },\n    [history]\n  )\n\n  const autoSignIn = useCallback(payload => {\n    dispatch({ type: SIGNIN_AUTO, payload })\n  }, [])\n\n  useEffect(() => {\n    const { token = null, userId = null } =\n      JSON.parse(localStorage.getItem(storageName)) || {}\n\n    if (token && userId) {\n      isJwtValid(token)\n        ? autoSignIn({ token, userId })\n        : signOut('Срок авторизации истёк. Войдите в аккаунт заново')\n    }\n    setReady(true)\n  }, [autoSignIn, signOut])\n\n  return (\n    <AuthContext.Provider\n      value={{ auth: state, signIn, signOut, register, loading, ready }}\n    >\n      {children}\n    </AuthContext.Provider>\n  )\n}\n\nfunction isJwtValid(token) {\n  const { exp = 0 } = jwtDecode(token)\n  return new Date().getTime() / 1000 < exp\n}\n","import React from 'react'\n\nexport const HomePage = () => {\n  return (\n    <>\n      <h2>О тестовом задании</h2>\n      <p>В задании реализовано full-stack приложение</p>\n      <p>\n        <strong>Frontend:</strong>\n      </p>\n      <ul>\n        <li>React</li>\n        <li>React router</li>\n        <li>SCSS</li>\n      </ul>\n      <p>\n        <strong>Backend:</strong>\n      </p>\n      <ul>\n        <li>Atlas MongoDB</li>\n        <li>Mongoose</li>\n        <li>Express</li>\n        <li>Express-validator</li>\n        <li>Bcrypt</li>\n        <li>JWT</li>\n        <li>Config</li>\n      </ul>\n      <p>\n        Авторизация и регистрация. Middleware авторизованных запросов. Валидация\n        на клиенте и сервере\n      </p>\n      <p>Localstorage, автологин, проверка срока JWT токена</p>\n      <p>Создание и просмотр своих и всех постов</p>\n      <p>404</p>\n      <p>Loader</p>\n      <p>\n        И react hooks{' '}\n        <span role=\"img\" aria-label=\"heard\">\n          ❤️\n        </span>\n      </p>\n    </>\n  )\n}\n","import React from 'react'\n\nexport const Loader = () => {\n  return <div className=\"loader\"></div>\n}\n","import React from 'react'\nimport { Loader } from './Loader'\nimport { Link } from 'react-router-dom'\n\nexport const PostList = ({ loading, posts }) => {\n  return (\n    <>\n      <h1>Новости</h1>\n      {loading ? (\n        <Loader />\n      ) : posts.length ? (\n        posts.map(item => (\n          <div className=\"posts\" key={item._id}>\n            <h2>\n              <Link to={`/post/${item._id}`}>{item.title}</Link>\n            </h2>\n            <p>{item.text}</p>\n            <p>{new Date(item.date).toLocaleString()}</p>\n          </div>\n        ))\n      ) : (\n        'Нет данных'\n      )}\n    </>\n  )\n}\n","import React, { useCallback, useEffect, useState } from 'react'\nimport { useHttp } from '../../hooks/http.hook'\nimport { PostList } from '../../components/PostList'\n\nexport const PostsPage = () => {\n  const [posts, setPosts] = useState([])\n\n  const { request, loading } = useHttp()\n\n  const fetch = useCallback(async () => {\n    const response = await request('/api/post/fetchAll')\n    setPosts(response)\n  }, [request])\n\n  useEffect(() => {\n    fetch()\n  }, [fetch])\n\n  return <PostList loading={loading} posts={posts} />\n}\n","import React, { useEffect, useCallback, useState, useContext } from 'react'\nimport { useHttp } from '../hooks/http.hook'\nimport { Loader } from '../components/Loader'\nimport { AuthContext } from '../context/auth/AuthContext'\nimport { Link } from 'react-router-dom'\n\nexport const ProfilePage = props => {\n  const { auth } = useContext(AuthContext)\n  const { request, loading } = useHttp()\n\n  const [profileData, setProfileData] = useState({\n    posts: []\n  })\n\n  const fetch = useCallback(async () => {\n    try {\n      const response = await request('/api/profile/', 'GET', null, {\n        Authorization: `Bearer ${auth.token}`\n      })\n      setProfileData(response)\n    } catch (error) {}\n  }, [auth, request])\n\n  useEffect(() => {\n    fetch()\n  }, [fetch])\n\n  return (\n    <>\n      {loading ? (\n        <Loader />\n      ) : profileData ? (\n        <div className=\"profile\">\n          <h1>Ваш профиль {profileData.id}</h1>\n          <p>Почта: {profileData.email}</p>\n          <ol>\n            {profileData.posts.length\n              ? profileData.posts.map(post => (\n                  <Link to={`/post/${post._id}`} key={post._id}>\n                    <li>{post.title}</li>\n                  </Link>\n                ))\n              : 'Постов нет'}\n          </ol>\n\n          <p>\n            <button onClick={() => props.history.push('/post/create')}>\n              Создать пост\n            </button>\n            <button onClick={() => props.history.push('/profile/posts')}>\n              Мои посты\n            </button>\n          </p>\n        </div>\n      ) : (\n        'Нет данных'\n      )}\n    </>\n  )\n}\n","import React from 'react'\nimport { Loader } from './Loader'\n\nexport const AuthForm = ({\n  loading,\n  submitLoginHandler,\n  submitRegisterHandler,\n  changeHandler\n}) => {\n  return (\n    <>\n      <h2>Авторизация / Регистрация</h2>\n      {loading ? (\n        <Loader />\n      ) : (\n        <form className=\"form\">\n          <input\n            type=\"email\"\n            placeholder=\"email\"\n            name=\"email\"\n            onChange={changeHandler}\n          />\n\n          <input\n            type=\"password\"\n            placeholder=\"Пароль\"\n            name=\"password\"\n            onChange={changeHandler}\n          />\n          <div className=\"buttons\">\n            <button disabled={loading} onClick={submitLoginHandler}>\n              Войти\n            </button>\n            <button disabled={loading} onClick={submitRegisterHandler}>\n              Регистрация\n            </button>\n          </div>\n        </form>\n      )}\n    </>\n  )\n}\n","import React, { useState, useContext } from 'react'\nimport { AuthContext } from '../context/auth/AuthContext'\nimport { AuthForm } from '../components/AuthForm'\n\nexport const AuthPage = props => {\n  const [form, setForm] = useState({\n    email: '',\n    password: ''\n  })\n\n  const { signIn, loading, register } = useContext(AuthContext)\n\n  const isValidated = ({ email, password }) =>\n    email || password ? true : false\n\n  const submitLoginHandler = async e => {\n    e.preventDefault()\n    if (!isValidated(form)) return alert('Не все поля заполнены')\n\n    try {\n      const { message, userId } = await signIn(form)\n      alert(message)\n      props.history.push(`/profile/${userId}`)\n    } catch (error) {}\n  }\n\n  const submitRegisterHandler = async e => {\n    e.preventDefault()\n    if (!isValidated(form)) return alert('Не все поля заполнены')\n\n    try {\n      const { message } = await register(form)\n      alert(message)\n      props.history.push(`/auth`)\n    } catch (error) {}\n  }\n\n  const changeHandler = e => {\n    const { name, value } = e.target\n\n    setForm({\n      ...form,\n      [name]: value\n    })\n  }\n\n  return (\n    <AuthForm\n      loading={loading}\n      submitLoginHandler={submitLoginHandler}\n      submitRegisterHandler={submitRegisterHandler}\n      changeHandler={changeHandler}\n    />\n  )\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport const NotFound = () => {\n  return (\n    <>\n      <h1>404</h1>\n      <p>\n        Страница не найдена. <Link to=\"/\">Вернуться на главную</Link>\n      </p>\n    </>\n  )\n}\n","import React, { useState, useContext } from 'react'\nimport { useHttp } from '../../hooks/http.hook'\nimport { AuthContext } from '../../context/auth/AuthContext'\n\nexport const CreatePostPage = () => {\n  const [form, setForm] = useState({\n    title: '',\n    text: ''\n  })\n\n  const { request, loading } = useHttp()\n  const { auth } = useContext(AuthContext)\n\n  const changeHandler = e => {\n    const { name, value } = e.target\n    setForm({\n      ...form,\n      [name]: value\n    })\n  }\n\n  const submitHandler = async e => {\n    e.preventDefault()\n    if (!form.title || !form.text) return alert('Не все поля заполнены')\n    const { message } = await request('/api/post/create', 'POST', form, {\n      Authorization: `Bearer ${auth.token}`\n    })\n    alert(message)\n  }\n\n  return (\n    <>\n      <h1>Создать новость</h1>\n      <form className=\"form\" onSubmit={submitHandler}>\n        <div className=\"form-create\">\n          <input\n            type=\"text\"\n            placeholder=\"Название новости\"\n            name=\"title\"\n            onChange={changeHandler}\n          />\n\n          <textarea\n            rows=\"5\"\n            placeholder=\"Описание\"\n            name=\"text\"\n            onChange={changeHandler}\n          />\n        </div>\n        <button disabled={loading}>Создать</button>\n      </form>\n    </>\n  )\n}\n","import React from 'react'\nimport { Loader } from './Loader'\n\nexport const Post = ({ loading, post }) => {\n  return (\n    <>\n      {loading ? (\n        <Loader />\n      ) : (\n        <div key={post._id}>\n          <h2>{post.title}</h2>\n          <p>{post.text}</p>\n          <p>{new Date(post.date).toLocaleString()}</p>\n        </div>\n      )}\n    </>\n  )\n}\n","import React, { useCallback, useEffect, useState } from 'react'\nimport { useHttp } from '../../hooks/http.hook'\nimport { Post } from '../../components/Post'\n\nexport const PostPage = ({ match }) => {\n  const { id } = match.params\n  const [post, setPost] = useState([])\n\n  const { request, loading } = useHttp()\n\n  const fetch = useCallback(async () => {\n    const response = await request(`/api/post/fetchByPostId/${id}`)\n    setPost(response)\n  }, [id, request])\n\n  useEffect(() => {\n    fetch()\n  }, [fetch])\n\n  return <Post loading={loading} post={post} />\n}\n","import React, { useCallback, useEffect, useState, useContext } from 'react'\nimport { useHttp } from '../../hooks/http.hook'\nimport { AuthContext } from '../../context/auth/AuthContext'\nimport { PostList } from '../../components/PostList'\n\nexport const PostsByUserId = () => {\n  const [posts, setPosts] = useState([])\n  const { request, loading } = useHttp()\n  const { auth } = useContext(AuthContext)\n\n  const fetch = useCallback(async () => {\n    const response = await request('/api/post/fetchByUserId', 'GET', null, {\n      Authorization: `Bearer ${auth.token}`\n    })\n    setPosts(response)\n  }, [auth.token, request])\n\n  useEffect(() => {\n    fetch()\n  }, [fetch])\n\n  return <PostList loading={loading} posts={posts} />\n}\n","import React, { useContext } from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport { HomePage } from './pages/HomePage'\nimport { PostsPage } from './pages/post/PostsPage'\nimport { ProfilePage } from './pages/ProfilePage'\nimport { AuthPage } from './pages/AuthPage'\nimport { AuthContext } from './context/auth/AuthContext'\nimport { Loader } from './components/Loader'\nimport { NotFound } from './pages/NotFound'\nimport { CreatePostPage } from './pages/post/CreatePostPage'\nimport { PostPage } from './pages/post/PostPage'\nimport { PostsByUserId } from './pages/post/PostsByUserIdPage'\n\nexport const Routes = () => {\n  const { auth, ready } = useContext(AuthContext)\n\n  if (!ready) {\n    return <Loader />\n  }\n\n  if (auth.token) {\n    return (\n      <Switch>\n        <Route path=\"/\" component={HomePage} exact />\n        <Route path=\"/profile/posts\" component={PostsByUserId} />\n        <Route path=\"/profile/:id\" component={ProfilePage} />\n\n        <Route path=\"/posts\" component={PostsPage} />\n        <Route path=\"/post/create\" component={CreatePostPage} />\n        <Route path=\"/post/:id\" component={PostPage} />\n        <Route path=\"\" component={NotFound} />\n      </Switch>\n    )\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/\" component={HomePage} exact />\n      <Route path=\"/auth\" component={AuthPage} />\n      <Route path=\"/posts\" component={PostsPage} />\n      <Route path=\"/post/create\" component={NotFound} />\n      <Route path=\"/post/:id\" component={PostPage} />\n      <Route path=\"\" component={NotFound} />\n    </Switch>\n  )\n}\n","import React from 'react'\nimport { Nav } from './components/Nav'\nimport { AuthState } from './context/auth/AuthState'\nimport { Routes } from './Routes'\n\nfunction App() {\n  return (\n    <AuthState>\n      <div className=\"container\">\n        <Nav />\n        <Routes />\n      </div>\n    </AuthState>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { BrowserRouter } from 'react-router-dom'\n\nconst app = (\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n)\n\nReactDOM.render(app, document.getElementById('root'))\n\nserviceWorker.unregister()\n"],"sourceRoot":""}